{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/javascript-kernel-extension/lib/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/javascript-kernel/lib/kernel.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/kernel/lib/kernel.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/kernel/lib/tokens.js"],"names":["id","autoStart","requires","activate","app","kernelspecs","register","spec","name","display_name","language","argv","env","interrupt_mode","metadata","resources","create","async","options","JavaScriptKernel","super","this","_evalFunc","Function","_ready","PromiseDelegate","_iframe","document","createElement","style","visibility","position","top","onload","_initIFrame","resolve","window","addEventListener","e","msg","data","event","content","stream","body","appendChild","isDisposed","remove","dispose","promise","implementation","implementation_version","language_info","codemirror_mode","file_extension","mimetype","nbconvert_exporter","pygments_lexer","version","protocol_version","status","banner","help_links","text","url","code","result","_eval","publishExecuteResult","execution_count","executionCount","user_expressions","stack","message","publishExecuteError","ename","evalue","traceback","_a","_b","vars","contentWindow","cursor_pos","word","slice","match","matches","filter","v","startsWith","cursor_start","length","cursor_end","Error","BaseKernel","_history","_executionCount","_isDisposed","_disposed","Signal","_parentHeader","undefined","sendMessage","_id","_name","_sendMessage","Promise","emit","_busy","header","msg_type","_kernelInfo","_execute","_complete","_historyRequest","commOpen","commMsg","commClose","_idle","KernelMessage","channel","msgType","session","parentHeader","type","buffers","parent","execution_state","kernelInfoRequest","historyMsg","history","executeMsg","_executeInput","push","reply","executeRequest","completeMsg","completeRequest","IKernels","Token","IKernelSpecs"],"mappings":"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","file":"642.093dee9cf159627dc555.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { IKernelSpecs } from '@jupyterlite/kernel';\nimport { JavaScriptKernel } from '@jupyterlite/javascript-kernel';\n/**\n * A plugin to register the JavaScript kernel.\n */\nconst kernel = {\n    id: '@jupyterlite/javascript-kernel-extension:kernel',\n    autoStart: true,\n    requires: [IKernelSpecs],\n    activate: (app, kernelspecs) => {\n        kernelspecs.register({\n            spec: {\n                name: 'javascript',\n                display_name: 'JavaScript',\n                language: 'javascript',\n                argv: [],\n                spec: {\n                    argv: [],\n                    env: {},\n                    display_name: 'JavaScript',\n                    language: 'javascript',\n                    interrupt_mode: 'message',\n                    metadata: {}\n                },\n                resources: {\n                    'logo-32x32': 'TODO',\n                    'logo-64x64': '/kernelspecs/javascript.svg'\n                }\n            },\n            create: async (options) => {\n                return new JavaScriptKernel(options);\n            }\n        });\n    }\n};\nconst plugins = [kernel];\nexport default plugins;\n","import { BaseKernel } from '@jupyterlite/kernel';\nimport { PromiseDelegate } from '@lumino/coreutils';\n/**\n * A kernel that executes code in an IFrame.\n */\nexport class JavaScriptKernel extends BaseKernel {\n    /**\n     * Instantiate a new JavaScriptKernel\n     *\n     * @param options The instantiation options for a new JavaScriptKernel\n     */\n    constructor(options) {\n        super(options);\n        this._evalFunc = new Function('window', 'code', 'return window.eval(code);');\n        this._ready = new PromiseDelegate();\n        // create the main IFrame\n        this._iframe = document.createElement('iframe');\n        this._iframe.style.visibility = 'hidden';\n        this._iframe.style.position = 'absolute';\n        // position outside of the page\n        this._iframe.style.top = '-100000px';\n        this._iframe.onload = async () => {\n            await this._initIFrame();\n            this._ready.resolve();\n            window.addEventListener('message', (e) => {\n                const msg = e.data;\n                if (msg.event === 'stream') {\n                    const content = msg;\n                    this.stream(content);\n                }\n            });\n        };\n        document.body.appendChild(this._iframe);\n    }\n    /**\n     * Dispose the kernel.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._iframe.remove();\n        super.dispose();\n    }\n    /**\n     * A promise that is fulfilled when the kernel is ready.\n     */\n    get ready() {\n        return this._ready.promise;\n    }\n    /**\n     * Handle a kernel_info_request message\n     */\n    async kernelInfoRequest() {\n        const content = {\n            implementation: 'JavaScript',\n            implementation_version: '0.1.0',\n            language_info: {\n                codemirror_mode: {\n                    name: 'javascript'\n                },\n                file_extension: '.js',\n                mimetype: 'text/javascript',\n                name: 'javascript',\n                nbconvert_exporter: 'javascript',\n                pygments_lexer: 'javascript',\n                version: 'es2017'\n            },\n            protocol_version: '5.3',\n            status: 'ok',\n            banner: 'A JavaScript kernel running in the browser',\n            help_links: [\n                {\n                    text: 'JavaScript Kernel',\n                    url: 'https://github.com/jupyterlite/jupyterlite'\n                }\n            ]\n        };\n        return content;\n    }\n    /**\n     * Handle an `execute_request` message\n     *\n     * @param msg The parent message.\n     */\n    async executeRequest(content) {\n        const { code } = content;\n        try {\n            const result = this._eval(code);\n            this.publishExecuteResult({\n                execution_count: this.executionCount,\n                data: {\n                    'text/plain': result\n                },\n                metadata: {}\n            });\n            return {\n                status: 'ok',\n                execution_count: this.executionCount,\n                user_expressions: {}\n            };\n        }\n        catch (e) {\n            const { name, stack, message } = e;\n            this.publishExecuteError({\n                ename: name,\n                evalue: message,\n                traceback: [stack]\n            });\n            return {\n                status: 'error',\n                execution_count: this.executionCount,\n                ename: name,\n                evalue: message,\n                traceback: [stack]\n            };\n        }\n    }\n    /**\n     * Handle an complete_request message\n     *\n     * @param msg The parent message.\n     */\n    async completeRequest(content) {\n        var _a, _b;\n        // naive completion on window names only\n        // TODO: improve and move logic to the iframe\n        const vars = this._evalFunc(this._iframe.contentWindow, 'Object.keys(window)');\n        const { code, cursor_pos } = content;\n        const words = (_a = code.slice(0, cursor_pos).match(/(\\w+)$/)) !== null && _a !== void 0 ? _a : [];\n        const word = (_b = words[0]) !== null && _b !== void 0 ? _b : '';\n        const matches = vars.filter(v => v.startsWith(word));\n        return {\n            matches,\n            cursor_start: cursor_pos - word.length,\n            cursor_end: cursor_pos,\n            metadata: {},\n            status: 'ok'\n        };\n    }\n    /**\n     * Handle an `inspect_request` message.\n     *\n     * @param content - The content of the request.\n     *\n     * @returns A promise that resolves with the response message.\n     */\n    async inspectRequest(content) {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Handle an `is_complete_request` message.\n     *\n     * @param content - The content of the request.\n     *\n     * @returns A promise that resolves with the response message.\n     */\n    async isCompleteRequest(content) {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Handle a `comm_info_request` message.\n     *\n     * @param content - The content of the request.\n     *\n     * @returns A promise that resolves with the response message.\n     */\n    async commInfoRequest(content) {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Send an `input_request` message.\n     *\n     * @param content - The content of the request.\n     */\n    async inputRequest(content) {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Send an `comm_open` message.\n     *\n     * @param msg - The comm_open message.\n     */\n    async commOpen(msg) {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Send an `comm_msg` message.\n     *\n     * @param msg - The comm_msg message.\n     */\n    async commMsg(msg) {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Send an `comm_close` message.\n     *\n     * @param close - The comm_close message.\n     */\n    async commClose(msg) {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Execute code in the kernel IFrame.\n     *\n     * @param code The code to execute.\n     */\n    _eval(code) {\n        return this._evalFunc(this._iframe.contentWindow, code);\n    }\n    /**\n     * Create a new IFrame\n     *\n     * @param iframe The IFrame to initialize.\n     */\n    async _initIFrame() {\n        if (!this._iframe.contentWindow) {\n            return;\n        }\n        this._evalFunc(this._iframe.contentWindow, `\n        console._log = console.log;\n        console._error = console.error;\n\n        window._bubbleUp = function(msg) {\n          window.parent.postMessage(msg);\n        }\n\n        console.log = function() {\n          const args = Array.prototype.slice.call(arguments);\n          window._bubbleUp({\n            \"event\": \"stream\",\n            \"name\": \"stdout\",\n            \"text\": args.join(' ') + '\\\\n'\n          });\n        };\n        console.info = console.log;\n\n        console.error = function() {\n          const args = Array.prototype.slice.call(arguments);\n          window._bubbleUp({\n            \"event\": \"stream\",\n            \"name\": \"stderr\",\n            \"text\": args.join(' ') + '\\\\n'\n          });\n        };\n        console.warn = console.error;\n\n        window.onerror = function(message, source, lineno, colno, error) {\n          console.error(message);\n        }\n      `);\n    }\n}\n","import { KernelMessage } from '@jupyterlab/services';\nimport { Signal } from '@lumino/signaling';\n/**\n * A base kernel class handling basic kernel messaging.\n */\nexport class BaseKernel {\n    /**\n     * Construct a new BaseKernel.\n     *\n     * @param options The instantiation options for a BaseKernel.\n     */\n    constructor(options) {\n        this._history = [];\n        this._executionCount = 0;\n        this._isDisposed = false;\n        this._disposed = new Signal(this);\n        this._parentHeader = undefined;\n        const { id, name, sendMessage } = options;\n        this._id = id;\n        this._name = name;\n        this._sendMessage = sendMessage;\n    }\n    /**\n     * A promise that is fulfilled when the kernel is ready.\n     */\n    get ready() {\n        return Promise.resolve();\n    }\n    /**\n     * Return whether the kernel is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * A signal emitted when the kernel is disposed.\n     */\n    get disposed() {\n        return this._disposed;\n    }\n    /**\n     * Get the kernel id\n     */\n    get id() {\n        return this._id;\n    }\n    /**\n     * Get the name of the kernel\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * The current execution count\n     */\n    get executionCount() {\n        return this._executionCount;\n    }\n    /**\n     * Get the last parent header\n     */\n    get parentHeader() {\n        return this._parentHeader;\n    }\n    /**\n     * Dispose the kernel.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        this._disposed.emit(void 0);\n    }\n    /**\n     * Handle an incoming message from the client.\n     *\n     * @param msg The message to handle\n     */\n    async handleMessage(msg) {\n        this._busy(msg);\n        const msgType = msg.header.msg_type;\n        switch (msgType) {\n            case 'kernel_info_request':\n                await this._kernelInfo(msg);\n                break;\n            case 'execute_request':\n                await this._execute(msg);\n                break;\n            case 'complete_request':\n                await this._complete(msg);\n                break;\n            case 'history_request':\n                await this._historyRequest(msg);\n                break;\n            case 'comm_open':\n                await this.commOpen(msg);\n                break;\n            case 'comm_msg':\n                await this.commMsg(msg);\n                break;\n            case 'comm_close':\n                await this.commClose(msg);\n                break;\n            default:\n                break;\n        }\n        this._idle(msg);\n    }\n    /**\n     * Stream an event from the kernel\n     *\n     * @param parentHeader The parent header.\n     * @param content The stream content.\n     */\n    stream(content) {\n        var _a, _b;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'stream',\n            // TODO: better handle this\n            session: (_b = (_a = this._parentHeader) === null || _a === void 0 ? void 0 : _a.session) !== null && _b !== void 0 ? _b : '',\n            parentHeader: this._parentHeader,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a `display_data` message to the client.\n     *\n     * @param content The display_data content.\n     */\n    displayData(content) {\n        var _a, _b;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'display_data',\n            // TODO: better handle this\n            session: (_b = (_a = this._parentHeader) === null || _a === void 0 ? void 0 : _a.session) !== null && _b !== void 0 ? _b : '',\n            parentHeader: this._parentHeader,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send an `execute_result` message.\n     *\n     * @param content The execut result content.\n     */\n    publishExecuteResult(content) {\n        var _a, _b;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'execute_result',\n            // TODO: better handle this\n            session: (_b = (_a = this._parentHeader) === null || _a === void 0 ? void 0 : _a.session) !== null && _b !== void 0 ? _b : '',\n            parentHeader: this._parentHeader,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send an `error` message to the client.\n     *\n     * @param content The error content.\n     */\n    publishExecuteError(content) {\n        var _a, _b;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'error',\n            // TODO: better handle this\n            session: (_b = (_a = this._parentHeader) === null || _a === void 0 ? void 0 : _a.session) !== null && _b !== void 0 ? _b : '',\n            parentHeader: this._parentHeader,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a `update_display_data` message to the client.\n     *\n     * @param content The update_display_data content.\n     */\n    updateDisplayData(content) {\n        var _a, _b;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'update_display_data',\n            // TODO: better handle this\n            session: (_b = (_a = this._parentHeader) === null || _a === void 0 ? void 0 : _a.session) !== null && _b !== void 0 ? _b : '',\n            parentHeader: this._parentHeader,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a `clear_output` message to the client.\n     *\n     * @param content The clear_output content.\n     */\n    clearOutput(content) {\n        var _a, _b;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'clear_output',\n            // TODO: better handle this\n            session: (_b = (_a = this._parentHeader) === null || _a === void 0 ? void 0 : _a.session) !== null && _b !== void 0 ? _b : '',\n            parentHeader: this._parentHeader,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a `comm` message to the client.\n     *\n     * @param .\n     */\n    handleComm(type, content, metadata, buffers) {\n        var _a, _b;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: type,\n            // TODO: better handle this\n            session: (_b = (_a = this._parentHeader) === null || _a === void 0 ? void 0 : _a.session) !== null && _b !== void 0 ? _b : '',\n            parentHeader: this._parentHeader,\n            content,\n            metadata,\n            buffers\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send an 'idle' status message.\n     *\n     * @param parent The parent message\n     */\n    _idle(parent) {\n        const message = KernelMessage.createMessage({\n            msgType: 'status',\n            session: parent.header.session,\n            parentHeader: parent.header,\n            channel: 'iopub',\n            content: {\n                execution_state: 'idle'\n            }\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a 'busy' status message.\n     *\n     * @param parent The parent message.\n     */\n    _busy(parent) {\n        const message = KernelMessage.createMessage({\n            msgType: 'status',\n            session: parent.header.session,\n            parentHeader: parent.header,\n            channel: 'iopub',\n            content: {\n                execution_state: 'busy'\n            }\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle a kernel_info_request message\n     *\n     * @param parent The parent message.\n     */\n    async _kernelInfo(parent) {\n        const content = await this.kernelInfoRequest();\n        const message = KernelMessage.createMessage({\n            msgType: 'kernel_info_reply',\n            channel: 'shell',\n            session: parent.header.session,\n            parentHeader: parent.header,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle a `history_request` message\n     *\n     * @param msg The parent message.\n     */\n    async _historyRequest(msg) {\n        const historyMsg = msg;\n        const message = KernelMessage.createMessage({\n            msgType: 'history_reply',\n            channel: 'shell',\n            parentHeader: historyMsg.header,\n            session: msg.header.session,\n            content: {\n                status: 'ok',\n                history: this._history\n            }\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send an `execute_input` message.\n     *\n     * @param msg The parent message.\n     */\n    _executeInput(msg) {\n        const parent = msg;\n        const code = parent.content.code;\n        const message = KernelMessage.createMessage({\n            msgType: 'execute_input',\n            parentHeader: parent.header,\n            channel: 'iopub',\n            session: msg.header.session,\n            content: {\n                code,\n                execution_count: this._executionCount\n            }\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle an execute_request message.\n     *\n     * @param msg The parent message.\n     */\n    async _execute(msg) {\n        const executeMsg = msg;\n        const content = executeMsg.content;\n        this._executionCount++;\n        // TODO: handle differently\n        this._parentHeader = executeMsg.header;\n        this._executeInput(executeMsg);\n        this._history.push([0, 0, content.code]);\n        const reply = await this.executeRequest(executeMsg.content);\n        const message = KernelMessage.createMessage({\n            msgType: 'execute_reply',\n            channel: 'shell',\n            parentHeader: executeMsg.header,\n            session: msg.header.session,\n            content: reply\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle an complete_request message\n     *\n     * @param msg The parent message.\n     */\n    async _complete(msg) {\n        const completeMsg = msg;\n        const content = await this.completeRequest(completeMsg.content);\n        const message = KernelMessage.createMessage({\n            msgType: 'complete_reply',\n            parentHeader: completeMsg.header,\n            channel: 'shell',\n            session: msg.header.session,\n            content\n        });\n        this._sendMessage(message);\n    }\n}\n","import { Token } from '@lumino/coreutils';\n/**\n * The token for the kernels service.\n */\nexport const IKernels = new Token('@jupyterlite/kernel:IKernels');\n/**\n * The token for the kernel spec service.\n */\nexport const IKernelSpecs = new Token('@jupyterlite/kernelspec:IKernelSpecs');\n"],"sourceRoot":""}